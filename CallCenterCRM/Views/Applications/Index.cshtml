@using CallCenterCRM.Interfaces
@model IEnumerable<CallCenterCRM.Models.Application>
@inject IApplicationService applicationService
@inject IUserService userService

@{
    string typeIdentityId = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
    string userIdentityId = GetUserClaim(typeIdentityId);

    var isAuthenticated = User.Identity.IsAuthenticated;

    string GetUserClaim(string type)
    {
        return User.Identities.First().Claims.First(c => c.Type == type).Value;
    }

    string actionName = this.ViewContext.RouteData.Values["action"].ToString();

    int[] page_sizes = { 20, 50, 75, 100 };

    int allCount = ViewBag.allCount;
    int totalItems = ViewBag.searchedCount;
    int pageSize = ViewBag.pageSize;
    int currentPage = ViewBag.pageNumber;
    int maxPages = 10;
    int totalPages = (int)Math.Ceiling((decimal)totalItems / pageSize);
    int startPage = currentPage - 5;
    int endPage = currentPage + 4;

    string? surname = ViewBag.Surname;
    string? firstname = ViewBag.Firstname;
    string? middlename = ViewBag.Middlename;
    string? contact = ViewBag.Contact;
    string? appnum = ViewBag.AppNum;
    int? region = ViewBag.Region;
    int? citydistrictid = ViewBag.City;

    if (startPage <= 0)
    {
        endPage = endPage - (startPage - 1);
        startPage = 1;
    }

    if (endPage > totalPages)
    {
        endPage = totalPages;
        if (endPage > maxPages)
        {
            startPage = endPage - maxPages - 1;
        }
    }
}

<h1>Заявление</h1>

<div class="table-responsive">
    <form asp-controller="Applications" asp-action="Index" method="get">
        <div class="row">
            <input type="hidden" name="pageSize" value=@pageSize />
            <div class="form-group col-md-3">
                <label for="Surname" class="control-label">Фамилия</label>
                <input name="Surname" id="Surname" class="form-control" />
            </div>
            <div class="form-group col-md-3">
                <label for="Firstname" class="control-label">Имя</label>
                <input name="Firstname" id="Firstname" class="form-control" />
            </div>
            <div class="form-group col-md-3">
                <label for="Middlename" class="control-label">Отчество</label>
                <input name="Middlename" id="Middlename" class="form-control" />
            </div>
            <div class="form-group col-md-3">
                <label for="Contact" class="control-label">Контакт</label>
                <input name="Contact" id="Contact" class="form-control" value=@ViewBag.Contact />
            </div>
            <div class="form-group col-md-3">
                <label for="Region" class="control-label">Регион</label>
                <select name="Region" id="Region" class="form-control" asp-items=@ViewBag.RegionsList>
                    <option value=""> - </option>
                </select>
            </div>
            <div class="form-group col-md-3">
                <label for="CityDistrictId" class="control-label">Район/город</label>
                <select name="CityDistrictId" id="CityDistrictId" class="form-control" asp-items="ViewBag.CityDistrictList">
                    <option value=""> - </option>
                </select>
            </div>
            <div class="form-group col-md-3">
                <label for="AppNum" class="control-label">Номер заявления</label>
                <input name="AppNum" id="AppNum" class="form-control" />
            </div>
            <div class="col-md-12">
                <div class="d-flex justify-content-end">
                    <button id="clean_fields" class="btn btn-secondary">Очистить</button>
                    <input type="submit" value="Поиск" class="btn btn-info" />
                </div>
            </div>
        </div>
    </form>

    <hr />

    <div class="row justify-content-between">
        <div class="form-group col-md-6">
            Количество рядов:
            @foreach (int size in page_sizes)
            {
                @Html.ActionLink($"{size}", "Index",
            new { pageSize = size, surname, firstname, middlename, contact, region, citydistrictid},
            new {@class = $"btn {(size == pageSize ? "btn-info":"btn-inverse-info")} "})
            }
        </div>
        <div class="form-group col-md-6">
            <div class="d-flex justify-content-end">
                <button class="btn btn-export-excel" id="btnExport" onclick="ExportToExcel('xlsx')">
                    Экспорт в Excel <i class="menu-icon mdi mdi-file-excel"></i>
                </button>
            </div>
        </div>
    </div>

    <table class="table table-striped" id="statsTable">
        <thead>
            <tr>
                <th></th>
                <th>Номер обращения</th>
                <th>Источник обращения</th>
                <th>Дата поступления</th>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Отчество</th>
                <th>Регион</th>
                <th>Район/город</th>
                <th>Телефон</th>
                <th>Тип заявителя</th>
                <th>Автор</th>
                <th>Статус</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="table-row-item">

                    <td>
                        @if (applicationService.IsGot(userService.GetRole(userIdentityId), item.Status) && !item.IsGot)
                        {
                            <span class="count-app">00</span>
                        }
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" asp-route-userId=@userService.GetUserId(userIdentityId)
                       asp-route-actionName=@actionName>
                            @(item.AppNum ?? $"{item.Id}-{(int)item.Applicant.ReferenceSource}/{item.CreatedDate.Value.Year.ToString().Substring(2)}")
                        </a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.ReferenceSource)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.CreatedDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Firstname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Surname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Middlename)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Region)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.CityDistrict.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Contact)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Applicant.Type)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AuthorName)
                    </td>
                    <td>
                        @if (userService.GetUserRole(userIdentityId) == Roles.CrmOperator.GetDisplayName())
                        {
                            <span class="app-status btn-rounded btn-inverse-@applicationService.GetStatusForOperator(item).color btn-fw">
                                <i class="mdi mdi-@applicationService.GetStatusForOperator(item).icon"></i>
                            </span>
                        }
                        else
                        {
                            <span class="app-status btn-rounded btn-inverse-@applicationService.GetAppStatusParams(item.Status).color btn-fw">
                                <i class="mdi mdi-@applicationService.GetAppStatusParams(item.Status).icon"></i>
                            </span>
                            @if (item.Answer != null)
                            {
                                <span class="app-status btn-rounded btn-inverse-@applicationService.GetAnswerStatusParams(item.Answer.Status).color btn-fw">
                                    <i class="mdi mdi-@applicationService.GetAnswerStatusParams(item.Answer.Status).icon"></i>
                                </span>
                            }
                        }
                    </td>

                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="form-group d-flex justify-content-center">
            @if (currentPage > 1)
            {
                @Html.ActionLink("<<", "Index",
            new { page = 1, pageSize, surname, firstname, middlename, contact, region, citydistrictid},
            new { @class = "btn btn-rounded btn-outline-info"})
                @Html.ActionLink("<", "Index",
            new { page = currentPage - 1, pageSize, surname, firstname, middlename, contact, region, citydistrictid},
            new { @class = "btn btn-rounded btn-outline-info"})
            }
            @for (var pg = startPage; pg <= endPage; pg++)
            {
                @Html.ActionLink($"{pg}", "Index",
            new { page = pg, pageSize, surname, firstname, middlename, contact, region, citydistrictid},
            new {@class = $"btn btn-rounded {(pg == currentPage ? "btn-info":"btn-outline-info")} "})
            }

            @if (currentPage < totalPages)
            {
                @Html.ActionLink(">", "Index",
            new { page = currentPage + 1, pageSize, surname, firstname, middlename, contact, region, citydistrictid},
            new { @class = "btn btn-rounded btn-outline-info"})
                @Html.ActionLink(">>", "Index",
            new { page = totalPages, pageSize, surname, firstname, middlename, contact, region, citydistrictid},
            new { @class = "btn btn-rounded btn-outline-info"})
            }
        </div>
    </div>
</div>

@section Scripts {
    @{
		await Html.RenderPartialAsync("Scripts/_InputMaskScriptsPartial");
		await Html.RenderPartialAsync("Scripts/_Select2ScriptsPartial");
		await Html.RenderPartialAsync("Scripts/_ExportExcelScriptsPartial");
		await Html.RenderPartialAsync("Scripts/CityScriptsPartial");
		await Html.RenderPartialAsync("Scripts/GetUrlParamsScriptsPartial");
		await Html.RenderPartialAsync("Scripts/SearchFieldsScriptsPartial");
	}
}